{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/leetcode-103/","webpackCompilationHash":"7f53535258db0a6903aa","result":{"data":{"markdownRemark":{"id":"66835079-a58c-55b0-be1c-6fd049a80028","html":"<h1 id=\"문제\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h1>\n<p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between). <a href=\"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Leetcode</a></p>\n<h1 id=\"코드\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h1>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> TreeNode {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> val;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  TreeNode *left;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  TreeNode *right;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">TreeNode</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> x) : </span><span class=\"mtk11\">val</span><span class=\"mtk1\">(x), </span><span class=\"mtk11\">left</span><span class=\"mtk1\">(</span><span class=\"mtk4\">NULL</span><span class=\"mtk1\">), </span><span class=\"mtk11\">right</span><span class=\"mtk1\">(</span><span class=\"mtk4\">NULL</span><span class=\"mtk1\">) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> Node {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  TreeNode *node;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> level;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(TreeNode* n, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> l): </span><span class=\"mtk11\">node</span><span class=\"mtk1\">(n), </span><span class=\"mtk11\">level</span><span class=\"mtk1\">(l) {}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">vector&lt;vector&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;&gt; </span><span class=\"mtk11\">zigzagLevelOrder</span><span class=\"mtk1\">(TreeNode* </span><span class=\"mtk12\">root</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (root == </span><span class=\"mtk4\">NULL</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> vector&lt;vector&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;&gt;();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  vector&lt;vector&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;&gt; result;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  queue&lt;Node*&gt; q;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  Node* tmp = new </span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(root, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(tmp);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">empty</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Node* n = </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">front</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">result</span><span class=\"mtk1\">.</span><span class=\"mtk11\">size</span><span class=\"mtk1\">() == </span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">level</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">result</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push_back</span><span class=\"mtk1\">(vector&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;{</span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">node</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">val</span><span class=\"mtk1\">});</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">result</span><span class=\"mtk1\">[</span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">level</span><span class=\"mtk1\">].</span><span class=\"mtk11\">push_back</span><span class=\"mtk1\">(</span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">node</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">val</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    TreeNode* left = </span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">node</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">left</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    TreeNode* right = </span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">node</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">right</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (left != </span><span class=\"mtk4\">NULL</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      Node* tmp = new </span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(left, </span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">level</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(tmp);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (right != </span><span class=\"mtk4\">NULL</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      Node* tmp = new </span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(right, </span><span class=\"mtk12\">n</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">level</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(tmp);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; i &lt; </span><span class=\"mtk12\">result</span><span class=\"mtk1\">.</span><span class=\"mtk11\">size</span><span class=\"mtk1\">(); i++) { </span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (i % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk11\">reverse</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">[i].</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">result</span><span class=\"mtk1\">[i].</span><span class=\"mtk11\">end</span><span class=\"mtk1\">());</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> result;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h1 id=\"풀이\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h1>\n<p>그냥 BFS 후에 필요한 부분만 뒤집는다.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"slug":"/posts/leetcode-103/","tagSlugs":["/tag/leetcode/"]},"frontmatter":{"date":"2019-09-09","description":"Given a binary tree, return the zigzag level order traversal of its nodes' values.","tags":["Leetcode"],"title":"[Leetcode] Binary Tree Zigzag Level Order Traversal","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/leetcode-103/"}}}