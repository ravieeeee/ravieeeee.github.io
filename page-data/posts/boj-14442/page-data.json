{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/boj-14442/","webpackCompilationHash":"7f53535258db0a6903aa","result":{"data":{"markdownRemark":{"id":"e95dc7a9-9e06-5348-a547-747eb58f6581","html":"<h1 id=\"문제\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h1>\n<p>N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.</p>\n<p>만약에 이동하는 도중에 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 K개 까지 부수고 이동하여도 된다.</p>\n<p>맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오. <a href=\"https://www.acmicpc.net/problem/14442\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">baekjoon</a></p>\n<h1 id=\"코드\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h1>\n<pre class=\"default-dark vscode-highlight\" data-language=\"c\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;iostream&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;vector&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;algorithm&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;queue&gt;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">using namespace std;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">struct</span><span class=\"mtk1\"> Node {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> x, y, breaking;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _x, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> _y, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> b) : </span><span class=\"mtk11\">x</span><span class=\"mtk1\">(_x), </span><span class=\"mtk11\">y</span><span class=\"mtk1\">(_y), </span><span class=\"mtk11\">breaking</span><span class=\"mtk1\">(b) {};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">][</span><span class=\"mtk7\">1000</span><span class=\"mtk1\">][</span><span class=\"mtk7\">11</span><span class=\"mtk1\">];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> dir_x</span><span class=\"mtk4\">[]</span><span class=\"mtk1\"> = {-</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">}, dir_y</span><span class=\"mtk4\">[]</span><span class=\"mtk1\"> = {</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">};</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">() {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> n, m, k;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  vector&lt;vector&lt;</span><span class=\"mtk4\">char</span><span class=\"mtk1\">&gt;&gt; </span><span class=\"mtk11\">v</span><span class=\"mtk1\">(n, vector&lt;</span><span class=\"mtk4\">char</span><span class=\"mtk1\">&gt;(m));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> cnt_real_k = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; i &lt; n; i++) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    string tmp;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    cin &gt;&gt; tmp;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> j = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; j &lt; m; j++) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">v</span><span class=\"mtk1\">[i][j] = </span><span class=\"mtk12\">tmp</span><span class=\"mtk1\">[j];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">v</span><span class=\"mtk1\">[i][j] == </span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">) cnt_real_k++;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (cnt_real_k &lt; k) k = cnt_real_k;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// bfs</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  queue&lt;Node&gt; q;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">][</span><span class=\"mtk7\">0</span><span class=\"mtk1\">][</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">empty</span><span class=\"mtk1\">()) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    Node node = </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">front</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">();</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; i &lt; </span><span class=\"mtk7\">4</span><span class=\"mtk1\">; i++) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> new_x = </span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">dir_x</span><span class=\"mtk1\">[i], new_y = </span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">dir_y</span><span class=\"mtk1\">[i];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (new_x &lt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || new_y &lt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || new_x &gt;= n || new_y &gt;= m) </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// 빈 칸</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">bool</span><span class=\"mtk1\"> is_wall = </span><span class=\"mtk12\">v</span><span class=\"mtk1\">[new_x][new_y] == </span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!is_wall &amp;&amp; </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[new_x][new_y][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[new_x][new_y][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\">][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\">][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\">] + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(new_x, new_y, </span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// 벽</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (is_wall &amp;&amp; </span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\"> &lt; k &amp;&amp; </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[new_x][new_y][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[new_x][new_y][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\">][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\">][</span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\">] + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">q</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Node</span><span class=\"mtk1\">(new_x, new_y, </span><span class=\"mtk12\">node</span><span class=\"mtk1\">.</span><span class=\"mtk12\">breaking</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> result = -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">int</span><span class=\"mtk1\"> i = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; i &lt;= k; i++) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">d</span><span class=\"mtk1\">[n - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">][m - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">][i] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (result == -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">) result = </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[n - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">][m - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">][i];</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> result = </span><span class=\"mtk11\">min</span><span class=\"mtk1\">(result, </span><span class=\"mtk12\">d</span><span class=\"mtk1\">[n - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">][m - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">][i]);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  cout &lt;&lt; result;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<h1 id=\"풀이\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h1>\n<p><a href=\"https://ravieeeee.github.io/posts/boj-15686/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">치킨 배달</a>처럼 풀면 될 줄 알았는데.. 많은 것을 배웠다.</p>\n<p><em>시행착오</em></p>\n<ol>\n<li>벽 k개 부숴서 새로 만든 맵으로 BFS 돌기<br>\n지도 안 최대 벽 수는 n * m개, 이 n * m개의 벽에 대해서 하나씩 부수고 n * m 탐색하면? O((n * m)^2)이다.</li>\n<li>가면서 부수자!<br>\n각 path마다 방문 체크여부를 가지려 했지만, 큐에 <code>is_visited[1000][1000]</code>를 담으려니 노드가 1000개만 되어도 메모리 초과가 되었다.</li>\n<li>방문 여부를 외부에서 관리해야 한다.<br>\n치킨 배달이나 <a href=\"https://ravieeeee.github.io/posts/leetcode-542/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">01 Matrix</a>에서 했던 방식처럼 외부에서 depth를 관리한다. depth가 0이 아니라면 이미 방문했다는 것이고, BFS는 일찍 방문할수록 최단 거리기 때문에 다시 방문할 필요가 없다.</li>\n</ol>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","fields":{"slug":"/posts/boj-14442/","tagSlugs":["/tag/baekjoon/"]},"frontmatter":{"date":"2019-10-13","description":"맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.","tags":["Baekjoon"],"title":"[BOJ 14442] 벽 부수고 이동하기 2","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/boj-14442/"}}}