{"componentChunkName":"component---src-templates-category-template-js","path":"/category/algorithm","webpackCompilationHash":"449118c97cc28898e147","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/algorithm/","slug":"/posts/leetcode-650/"},"frontmatter":{"date":"2019-09-21","description":"You have to get exactly n 'A' on the notepad by performing the minimum number of steps permitted.","category":"Algorithm","title":"[Leetcode] 2 Keys Keyboard"}}},{"node":{"fields":{"categorySlug":"/category/algorithm/","slug":"/posts/boj-17135/"},"frontmatter":{"date":"2019-09-19","description":"격자판의 상태가 주어졌을 때, 궁수의 공격으로 제거할 수 있는 적의 최대 수를 계산해보자.","category":"Algorithm","title":"[BOJ 17135] 캐슬 디펜스"}}},{"node":{"fields":{"categorySlug":"/category/algorithm/","slug":"/posts/leetcode-124/"},"frontmatter":{"date":"2019-09-18","description":"Given a non-empty binary tree, find the maximum path sum.","category":"Algorithm","title":"[Leetcode] Binary Tree Maximum Path Sum"}}},{"node":{"fields":{"categorySlug":"/category/algorithm/","slug":"/posts/leetcode-105/"},"frontmatter":{"date":"2019-09-17","description":"Given preorder and inorder traversal of a tree, construct the binary tree.","category":"Algorithm","title":"[Leetcode] Construct Binary Tree from Preorder and Inorder Traversal"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"Algorithm","currentPage":0,"postsLimit":4,"postsOffset":0,"prevPagePath":"/category/algorithm","nextPagePath":"/category/algorithm/page/1","hasPrevPage":false,"hasNextPage":true}}}